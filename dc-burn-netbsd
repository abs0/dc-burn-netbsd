#!/bin/sh -e

# Copyright (c) 2012 David Brownlee (Standard 2 clause BSD licence)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

version=8.0
kernel_type=GENERIC_MD
iso_image=data.raw
tmpdir=dc-burn-netbsd-files
opt_cdrecord="driveropts=burnfree gracetime=3"

base_sets="base.tgz etc.tgz"
std_sets="$base_sets comp.tgz man.tgz misc.tgz modules.tgz tests.tgz text.tgz"
x_sets="$std_sets xbase.tgz xcomp.tgz xetc.tgz xfont.tgz xserver.tgz"

download_sets()
{
download_dir=$1
shift;
sets="$*"
sets_url_dir=$dist_url/sets
for f in $sets; do
    fetch_file_if_missing sets/$f $download_dir/$f
done
}

extract_sets_and_setup_live()
{
if [ -n "$sudo" ] ; then
    $sudo $prog -E $opt_live $*
    return
fi
data_dir=$1
sets_dir=$2
shift ; shift
sets=$*
for tarfile in $sets ; do
    echo " - $tarfile"
    tar xpzf $sets_dir/$tarfile -C $data_dir
done

# So it can be updated later if we are currently root
touch $data_dir/.dist
chmod 666 $data_dir/.dist

if [ -z "$opt_live" ]; then
    return
fi

echo ">> Setup extracted files for live CD use"

if [ ! -z "$opt_custom" ]; then
    echo "Sourcing $opt_custom for live CD customizations"
    . "$opt_custom"
    return
fi

# Unfortunately (serial) getty & remote fails on ro dev, even with union tmpfs
# tested as of NetBSD-6
# if [ -x $data_dir/dev/MAKEDEV ] ; then
#     echo "Run MAKEDEV"
#     (cd $data_dir/dev && ./MAKEDEV all)
# fi

echo "Create fstab"
cat > $data_dir/etc/fstab << END
/dev/gdrom0a /           cd9660 ro 0 0
END

echo "Update hosts"
echo "127.0.0.1 dreamcast" >> $data_dir/etc/hosts

echo "Update motd"
(
echo "NetBSD $version ($kernel_type)"
sed '1{/^NetBSD.*/{d;};};' < $data_dir/etc/motd
) > $data_dir/etc/motd.tmp
mv  $data_dir/etc/motd.tmp  $data_dir/etc/motd

mkdir -p $data_dir/.tmpfs
if [ ! -f $data_dir/etc/rc.d/readonlyroot ] ; then
    echo "Create rc.d/readonlyroot"
    echo '#!/bin/sh

# REQUIRE: DISKS 
# PROVIDE: readonlyroot
# BEFORE:  mountcritlocal
 
$_rc_subr_loaded . /etc/rc.subr

name="readonlyroot"
start_cmd="readonlyroot_start"

readonlyroot_start()
{
        mount -t tmpfs tmpfs /tmp
        mount -t tmpfs tmpfs /.tmpfs
        for dir in etc root var ; do
                mkdir -p /.tmpfs/$dir
                mount -t union /.tmpfs/$dir /$dir
        done
}
 
load_rc_config $name
run_rc_command "$1"
' > $data_dir/etc/rc.d/readonlyroot
    chmod 755 $data_dir/etc/rc.d/readonlyroot
fi

# Provide xinit with a usable default xorg.conf
if [ -f $data_dir/etc/X11/xorg.conf.uskbd ] ; then
    echo "Create xorg.conf"
    cp $data_dir/etc/X11/xorg.conf.uskbd $data_dir/etc/X11/xorg.conf
fi

if grep -q 'rc_configured=NO' $data_dir/etc/rc.conf ; then
    echo "Update rc.conf"
    (
    sed 's/rc_configured=NO/rc_configured=YES/' $data_dir/etc/rc.conf
    cat << END
#
critical_filesystems_local='/etc /tmp /var'
hostname=dreamcast
#
cron=NO     # Disable cron
dhcpcd=YES  # If we have a network interface, set it up
inetd=NO    # Save memory
no_swap=YES # No point
postfix=NO  # Do not want to handle email
quota=NO    # Save time
savecore=NO # No point as no dump space
syslogd=NO  # Save memory
update_motd=NO # No need (and gives error on etc union mount tmpfs)
END
    ) > $data_dir/etc/rc.conf.tmp
    mv $data_dir/etc/rc.conf.tmp $data_dir/etc/rc.conf
fi

if [ "$(uname)" = NetBSD ] ; then
    v="$(uname -r | sed 's/\..*//')"
    if [ $v -ge 6 ] ; then
	echo "Pregenerating var/db/services.cdb"
        services_mkdb -o $data_dir/var/db/services.cdb $data_dir/etc/services
    fi
fi

# Takes *forever* and no easy way to pre-generate 
echo 'start_cmd=":"' > $data_dir/etc/rc.conf.d/fccache

# No point in checking root filesystem
echo 'start_cmd=":"' > $data_dir/etc/rc.conf.d/fsck_root

# No easy way to pre-generate 
echo 'start_cmd=":"' > $data_dir/etc/rc.conf.d/makemandb

# Unnecessary & generates many permission denied errors
echo 'start_cmd=":"' > $data_dir/etc/rc.conf.d/ttyflags

if ! grep -q '^PermitRootLogin yes' $data_dir/etc/ssh/sshd_config ; then
    echo "Add PermitRootLogin yes to sshd_config"
    echo "PermitRootLogin yes" >> $data_dir/etc/ssh/sshd_config
fi

if grep -q 'unknown	off' $data_dir/etc/ttys ; then
    echo "Set wsvt25 in ttys"
    sed 's/unknown	off/wsvt25	off/' $data_dir/etc/ttys > $data_dir/etc/ttys.tmp
    mv $data_dir/etc/ttys.tmp $data_dir/etc/ttys
fi

}

fatal()
{
echo "** $@" >&2
exit 1
}

fetch_file_if_missing()
{
remotefile=$1
file=$2
echo -n "$file: "
if [ ! -f $file ] ; then
    mkdir -p $(dirname $file)
    # Fall back to looking in NetBSD-archive
    if ! ftp -o - $dist_url > /dev/null ; then
	echo "Switching to NetBSD-archive"
	dist_url=http://ftp.netbsd.org/pub/NetBSD/NetBSD-archive/NetBSD-$version/dreamcast/binary
    fi
    ftp -o $file.tmp $dist_url/$remotefile
    mv $file.tmp $file
else
    echo "already present"
fi
}

fullpath()
{
case "$1" in
    /*) echo "$1" ;;
    *)  echo "$(pwd)/$1" ;;
esac
}

generate_daily_url()
{
version=$1
tag=$(echo $version|sed -e 's/daily-//' -e 's/-[^-]*$//')
build=$(echo $version|sed 's/.*-//')
echo http://nyftp.netbsd.org/pub/NetBSD-daily/$tag/$build/dreamcast/binary
}

getlinks()  
{           
url="$1"    
pattern="$2"
ftp -o - $url | sed -n 's/.*<a href="\([^"]*\)".*/\1/p' | egrep "$pattern"
}       

list_daily_version_branches()
{
dailyurl=http://nyftp.netbsd.org/pub/NetBSD-daily/
for tag in $(getlinks $dailyurl 'netbsd-|HEAD'); do
    echo daily-$tag | tr -d /
done
}

list_daily_versions()
{
dailyurl=http://nyftp.netbsd.org/pub/NetBSD-daily/
for tag in $(getlinks $dailyurl 'netbsd-|HEAD'); do
    for build in $(getlinks $dailyurl$tag 'Z'); do
	testurl=$dailyurl$tag${build}dreamcast/
	if ftp -o - $testurl > /dev/null 2>&1 ;then
	    echo daily-$tag-$build | tr -d /
	fi
    done
done
}

list_versions()
{
    echo Official release versions:
    (
    getlinks http://ftp.netbsd.org/pub/NetBSD/ 'NetBSD-[0-9]'
    getlinks http://ftp.netbsd.org/pub/NetBSD/NetBSD-archive 'NetBSD-[0-9]'
    ) | sed -e 's/NetBSD-//' -e 's:/::' | grep -v '^1\.[0-5]' | sort | sed 's/^/ - /'
    echo ; echo Daily built versions:
    list_daily_versions | sed 's/^/ - /'
    echo ; echo "Daily built branches (will take latest version):"
    list_daily_version_branches | sed 's/^/ - /'
}

prepare_audio_track()
{
audio_file=$1
echo -n "$audio_file: "
if [ ! -f $audio_file ] ; then
    dd if=/dev/zero bs=2352 count=300 of=$audio_file # Min 4 seconds audio
else
    echo "already present"
fi
}

prepare_ip_txt()
{
ip_file=$1
ip_boot=$2	# Must be ISO9660 compliant - all caps FILE.EXT
ip_name=$3
cat > $ip_file <<END
Hardware ID   : SEGA SEGAKATANA
Maker ID      : SEGA ENTERPRISES
Device Info   : 0000 CD-ROM1/1
Area Symbols  : JUE
Peripherals   : E000F10
Product No    : T0000
Version       : V1.000
Release Date  : $(date +%Y%M%d)
Boot Filename : $ip_boot
SW Maker Name : NetBSD
Game Title    : $ip_name
END
}

run_cdrecord()
{
echo cdrecord "$@"
$sudo cdrecord "$@"
}

#### main() start
#

while getopts CEbc:d:ehi:k:ls:t:v:x: f; do
    case $f in
        C)  opt_clean=-C ;;
	E)  opt_extract=-E ;;
        b)  opt_burn=-b ;;
        c)  opt_cdrecord="$OPTARG" ;;
	d)  opt_distdir="$OPTARG" ;;
        e)  opt_emulator=-e ;;
        h)  opt_show_help=-h ;;
        i)  opt_iso_image="$OPTARG" iso_image="$(fullpath $OPTARG)" ;;
        k)  opt_kernel="$OPTARG"; kernel_type="$OPTARG" ;;
        l)  opt_live=-l ;;
	s)  case "$OPTARG" in
		base) opt_sets="$base_sets" ;;
		std)  opt_sets="$std_sets" ;;
		x)    opt_sets="$x_sets" ;;
		*)    opt_sets="$OPTARG" ;;
	    esac
	    echo "Sets set to: $opt_sets"
	    ;;
        t)  tmpdir="$OPTARG" ;;
        v)  version="$OPTARG" ;;
        x)  opt_custom="$OPTARG" ;;
  esac
done
shift $(expr $OPTIND - 1)

if [ -n "$opt_live" ]; then
    if [ -z "$opt_sets" ] ; then
	opt_sets="$base_sets"
    fi
    if [ -z "$opt_kernel" ] ; then
	kernel_type='GENERIC'
    fi
fi

# Used to determine program to call for -E
case "$0" in
    /*) prog=$0 ;;
    *)  prog=$PWD/$0 ;;
esac

# Used internally if we needed to sudo to extract
if [ "$opt_extract" ] ; then
    extract_sets_and_setup_live "$@"
    exit
fi

if [ $# != 0 -o -n "$opt_show_help" ] ; then
    cat <<END
Usage: dc-burn-netbsd [opts]
 -C      : Clean work directory before starting
 -b      : Burn generated image to CD using cdrecord
 -c opts : Set cdrecord opts ($opt_cdrecord)
 -d dist : Take kernel/ & sets/ under dist dir - will not try to download
 -e      : Boot resultant image under an emulator (requires gxemul)
 -h      : This help
 -i      : Use existing ISO image. Assumed to be already bootable
 -k type : Set kernel type ($kernel_type) eg: GENERIC or GENERIC_MD
 -l      : Setup live cd - implies '-s base -K GENERIC' unless otherwise set
 -s type : Include NetBSD release, type is base, std, x or list of sets
 -t tmpd : Set temporary work directory to tmpd
 -v vers : Set NetBSD version ($version) use '?' for list
 -x path : Source a shell script to configure the live CD

dc-burn will create a temporary work directory $tmpdir which will
need to have sufficient space to store the downloaded & generated files.

if -d is used the directory is expected to match the layout on ftp.netbsd.org:
 - kernel/netbsd-\$type.bin.gz
 - sets/base.tgz ... etc (if -s given)

END
    exit;
fi

if [ $(id -u) != 0 ] ; then
    sudo=sudo
    if [ -n "$opt_sets" ]; then
        echo "Warning: Not running as root - will use sudo to extract release"
    fi
    if [ -n "$opt_burn" ]; then
        echo "Warning: Not running as root - will use sudo for cdrecord"
    fi
fi

case "$version" in 
    '?' ) list_versions; exit ;;
    daily-*-*Z )
	dist_url=$(generate_daily_url $version)
	;;
    daily-* )
	echo "Selecting most recent version for: $version"
	version=$(list_daily_versions | sort | grep ${version}- | tail -1)
	if [ -z "$version" ] ; then
	    fatal "Unable to locate matching recent daily build"
	fi
	echo "Selected: $version"
	dist_url=$(generate_daily_url $version)
	;;
    *)
	dist_url=http://ftp.netbsd.org/pub/NetBSD/NetBSD-$version/dreamcast/binary
esac

if [ -n "$opt_distdir" ] ; then
    distdir=$opt_distdir
else
    distdir=download/$version
fi

kernel_file=netbsd-$kernel_type.bin.gz
kernel=$distdir/kernel/$kernel_file

if [ -n "$opt_clean" ] ; then
    $sudo rm -rf $tmpdir
fi
mkdir -p $tmpdir
cd $tmpdir

if [ -z "$opt_iso_image" ] ; then
    if [ -z "$opt_distdir" ]; then
        # no distdir specified, download if necessary
        echo; echo ">> Download kernel if needed"
        fetch_file_if_missing kernel/$kernel_file $kernel
    
        if [ -n "$opt_sets" ] ; then
            echo; echo ">> Download sets if needed"
            download_sets $distdir/sets $opt_sets
        fi
    fi

    echo; echo ">> Generate the ip.txt file and use to create IP.BIN bootloader"
    prepare_ip_txt ip.txt NETBSD.BIN $version-$kernel_type
    dc-makeip ip.txt ip.bin

    dist_details="$(ls -l $kernel $(echo $opt_sets | fmt 1 | sed "s:^:$distdir/sets/:"); echo extra_opts=$opt_live)"
    if [ "$(test -f data/.dist && cat data/.dist)" = "$dist_details" ]; then
        echo "Contents of data already match requirements"
    else
        echo ; echo ">> Clean data dir"
        $sudo rm -rf data
        mkdir -p data

        echo; echo ">> Scramble $kernel_type kernel into loadable format"
        gzip -d -c $kernel > netbsd.tmp
        dc-scramble netbsd.tmp data/NETBSD.BIN
        rm -f netbsd.tmp

        if [ -n "$opt_sets" ] ; then
	    echo; echo ">> Extract sets ($opt_sets)"
	    extract_sets_and_setup_live data $distdir/sets $opt_sets
        fi
        echo "$dist_details" > data/.dist
    fi

    # 
    echo; echo ">> Create filesystem with boot loader"
    cp ip.bin $iso_image
    ( cd data && $sudo mkisofs -quiet -R -l -C 0,11702 -o - . | \
      dd bs=2048 skip=16 ) >> $iso_image

    echo ""; echo "Bootable image generated as $tmpdir/$iso_image"
fi

if [ -n "$opt_emulator" ]; then
    # 23965696 is 2048 * 11702
    gxemul="gxemul -XEdreamcast -d co23965696:$iso_image"
    echo; echo ">> Run emulator ($gxemul)"
    $gxemul
fi

if [ -n "$opt_burn" ] ; then

    echo; echo ">> Create audio track"
    prepare_audio_track audio.raw

    echo; echo ">> Burn CD"
    echo "cd $tmpdir"
    run_cdrecord $opt_cdrecord -multi -audio audio.raw
    run_cdrecord $opt_cdrecord -multi -multi -xa -eject $iso_image
fi

rm ip.txt ip.bin
